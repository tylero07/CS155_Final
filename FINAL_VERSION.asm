;*****************************************************************************
; Author: TYLER OSSO
; Date: 05-9-2025
; Revision: 1.0
;
; Description:
; THIS IS A LITE VERSION OF THE OREGON TRAIL ADVENTURE DECISION GAME
; Notes:
; THE PLAYER IS PROMPTED A QUESTION AND HAS TO MAKE DECISIONS WITH VARYING PENALTIES. THERE IS NO
; THERE IS NO "WIN" CONDITION
;   HALTS ARE  x300D, x333F, x382B
;
; Register Usage:
; R0 NOT USED
; R1 NOT USED
; R2 NOT USED
; R3 Not used
; R4 Not used
; R5 Not used
; R6 STACK POINTER
; R7 RETURN ADRESS
;****************************************************************************
.ORIG x3000

JSR INITIALIZE_GAME ; CLEAR REGISTERS AND SET NECESSARY
JSR WELCOME_LOOP ;GET PLAYER NAME AND INTRODUCE GAME

JSR QUESTION_ONE 
JSR STATUS_OF_PARTY ; GIVE PROGRESS UPDATE
JSR QUESTION_TWO
JSR STATUS_OF_PARTY; GIVE PROGRESS UPDATE
JSR QUESTION_THREE
JSR STATUS_OF_PARTY; GIVE PROGRESS UPDATE
TRAP x38            ; CUSTOM TRAP THAT GENERATES A RANDOM NUMBER BETWEEN 0-9
JSR UPDATE_PARTY    ; GIVE PROGRESS UPDATE
LD R7, Q4           ; DISTANCE IS TOO FAR TO REACH WITH JSR. NEED TO MANUALLY MOVE TO LOCATION
RET                 ; EXECUTE R7 ADDRESS
JSR UPDATE_PARTY    ; GIVE FINAL UPDATE

HALT

PARTY_START .FILL #99 ;STARTING PARTY SIZE
PARTY_SIZE .BLKW 1      ; CURRENT PARTY SIZE
MILES_REMAINING .BLKW 1 ;MILES REMAINING
STACK       .FILL xFE00 ; STACK STARTING LOCATION
MILES       .FILL #2160 ; STARTING MILES
TRAPLOC     .FILL x0038 ; TO SET TRAP 38 INSTRUCTION
TRAP45   .FILL x3800    ; WHERE TRAP 38 ROUTINE IS LOCATED
Q4          .FILL x348B ; START LOCATION FOR Q4 LOCATION
;*****************************************************************************
; Description:
; THIS SUBROUTINE UPDATES PARTY AFTER THE TRAP CALL
; Notes:
;  
;
; Register Usage:
; R0 NOT USED
; R1 IS RETURNED FROM TRAP WITH RANDOM VALUE
; R2 LOADS AND STORES PARTY SIZE
; R3 Not used
; R4 Not used
; R5 Not used
; R6 STACK POINTER
; R7 RETURN ADDRESS
;****************************************************************************
UPDATE_PARTY
LD R2, PARTY_SIZE
ADD R2, R2, R1
ST R2, PARTY_SIZE
RET
;*****************************************************************************
; Description:
; THIS SUBROUTINE PRINTS WELCOME MESSAGES AND GETS PLAYER NAME TO STORE IN BUFFER
; Notes:
;  USES THE THE BUFFER AND A LOOP TO GET PLAYER NAME
;
; Register Usage:
; R0 USED TO INTAKE/PRINT CHAR
; R1 NOT USED
; R2 USED TO CHECK FOR ENTER
; R3 Not used
; R4 Not used
; R5 BUFFER POINTER
; R6 STACK POINTER
; R7 RETURN ADDRESS
;****************************************************************************
WELCOME_LOOP
LD R5, NAME_BUFFER
ADD R6, R6, #-1
STR R5, R6, #0
LEA R0, WELCOME_MESSAGE
TRAP x22
LEA R0, ENTER_NAME
TRAP x22
INTAKE_LETTER
TRAP x20 ;TAKE IN LETTER
ADD R2, R0, #0 ;MAKE R2 = R0
ADD R5, R5, #1 ;MOVE POINTER
ADD R2, R2, #-10 ;SEE IF CHAR WAS ENTER
BRz DONE
TRAP x21 ;ECHO LETTER
STR R0, R5, #0 ;STORE ON STACK
BRnzp INTAKE_LETTER
DONE
AND R2, R2, #0 ; MAKE R2 = 0
STR R2, R5, #0 ;STORE NULL TERMINATOR
RET
NAME_BUFFER .FILL x5000
ENTER_NAME .STRINGZ "\nPLEASE ENTER THE PARTY LEADERS NAME: "
WELCOME_MESSAGE .STRINGZ "WELCOME TO THE SIMPLE OREGON TRAIL!"
;*****************************************************************************
; Description:
;  THIS SUBROUTINE CLEARS ALL REGISTERS AND SETS NECESSARY AND
;  INITIALIZES TRAP LOCATION
; Notes:
;  NONE
;
; Register Usage:
; R0 CLEARED -> LOAD TRAP LOCATION AS POINTER
; R1 CLEARED
; R2 CLEARED
; R3 CLEARED
; R4 CLEARED -> SET MILES
; R5 CLEARED -> INITIALIZED TO PARTY SIZE
; R6 CLEARED -> INITIALIZED TO STACK
; R7 RETURN ADDRESS
;****************************************************************************
INITIALIZE_GAME
AND R0, R0, #0 ;CLEAR ALL REGISTERS TO RESET GAME
AND R1, R1, #0
AND R2, R2, #0
AND R3, R3, #0
AND R4, R4, #0
AND R5, R5, #0
AND R6, R6, #0
LD R6, STACK ;INITIALIZE STACK
LD R5, PARTY_START ;INITIALIZE PARTY SIZE 100
ST R5, PARTY_SIZE
LD R4, MILES        ;INITIALIZE MILES TO 2160
ST R4, MILES_REMAINING
LD R4, TRAP45
LD R0, TRAPLOC
STR R4, R0, #0

RET
;*****************************************************************************
; Description:
;  PRINTS PROMPT AND ANSWERS 
; Notes:
;  PRINTS QUESTION 1
;
; Register Usage:
; R0 PRINT PROMPT
; R1 MILES EQUATION
; R2 RETURNS ANSWER
; R3 MILES AT THIS JUNCTURE
; R4 CLEARED
; R5 PARTY SIZE
; R6 STACK POINTER
; R7 RETURN ADDRESS
;****************************************************************************
QUESTION_ONE
LD R1, MILES_REMAINING ;LOAD MILES REMAINING
LD R3, MILES_Q1 ; LOAD THE MILES - Q1 MILES
ADD R1, R1, R3 ;MILES REMAINING - 50
ST R1, MILES_REMAINING ; STORE MILES REMAINING IN BLKW SPACE
LEA R0, Q1_PROMPT
TRAP x22
LEA R0, Q1_OPT1
TRAP x22
LEA R0, Q1_OPT2
TRAP x22
LEA R0, Q1_OPT3
TRAP x22
LEA R0, Q1_OPT4
TRAP x22
ADD R6, R6, #-1 ;MOVE POINTER
STR R7, R6, #0 ;STORE R7 ADDRESS ON THE STACK
JSR CHECK_ANSWER ;SANITIZE USER INPUT (1-4)
LD R5, PARTY_SIZE ; LOAD PARTY SIZE
LDR R7, R6, #0 ;RESTORE R7 FOR RETURN FROM R6 STACK STORAGE
ADD R6, R6, #1 ;MOVE POINTER BACK AFTER POP
ADD R2, R2, #-1 ; SUBTRACT 1 TO SEE IF R2 =1
BRz Q1ANSWER_1
ADD R2, R2, #-1 ;SUBTRACT 1 TO SEE IF R2 =2
BRz Q1ANSWER_2
ADD R2, R2, #-1 ;SUBTRACT 1 TO SEE IF R2 =3
BRz Q1ANSWER_3
ADD R2, R2, #-1 ;SUBTRACT 1 TO SEE IF R2 =4
BRz Q1ANSWER_4
Q1ANSWER_1 ;NO PENALTY 
RET
Q1ANSWER_2
ADD R5, R5, #-1 ; PENALTY OF -1
BRnz Q1ALL_DEAD ; CHECK IF ALL MEMBERS ARE DEAD
ST R5, PARTY_SIZE ; UPDATE PARTY SIZE
RET     
Q1ANSWER_3 
ADD R5, R5, #-10 ; LOSS OF 10 PENALTY
BRnz Q1ALL_DEAD  ; BRANCH IF ALL MEMEBERS ARE DEAD
ST R5, PARTY_SIZE   ; UPDATE PARTY SIZE
RET
Q1ANSWER_4 
Q1ALL_DEAD
AND R5, R5, #0 ;INSTANT LOSS/ MAKE R5 = 0 (IF NEGATIVE)
ST R5, PARTY_SIZE ;UPDATE PARTY SIZE
JSR GAME_OVER

Q1_PROMPT    .STRINGZ "\nYou come to a raging river.  How do you cross?\n"
Q1_OPT1      .STRINGZ "  1) Follow the bank upstream for a mile\n";(No loss)
Q1_OPT2      .STRINGZ "  2) Wade across now\n"                 ;(Small loss)
Q1_OPT3      .STRINGZ "  3) Build a raft\n"                     ;(Large loss)
Q1_OPT4      .STRINGZ "  4) Swim across\n"                      ;(Instant fail)
MILES_Q1        .FILL #-50
;*****************************************************************************
; Description:
;  PRINTS PROMPT AND ANSWERS 
; Notes:
;  PRINTS QUESTION 2
;
; Register Usage:
; R0 PRINT PROMPT
; R1 MILES EQUATION
; R2 RETURNS ANSWER
; R3 MILES AT THIS JUNCTURE
; R4 CLEARED
; R5 PARTY SIZE
; R6 STACK POINTER
; R7 RETURN ADDRESS
;****************************************************************************
QUESTION_TWO
LEA R2, MILES_REMAINING_2 ;LOAD MILES REMAINING AS POINTER
LD R3, MILES_Q2             ; LOAD MILES MOVED FROM Q2
LDR R1, R2, #0          ; LOAD MILES REAMAINING (R2) POINTER INTO R1 AS MEMORY ADDRESS
LDR R1, R1, #0          ; DEREFERENCE SELF TO GET VALUE
ADD R1, R1, R3          ;MILES REMAINING - 150
STI R1, MILES_REMAINING_2 ; STORE INDIRECT R1 INTO MILES REM STORED MEM ADDRESS
LEA R0, Q2_PROMPT           ; PRINT PROMPTS
TRAP x22
LEA R0, Q2_OPT1
TRAP x22
LEA R0, Q2_OPT2
TRAP x22
LEA R0, Q2_OPT3
TRAP x22
LEA R0, Q2_OPT4
TRAP x22
ADD R6, R6, #-1 ;MOVE POINTER
STR R7, R6, #0 ;STORE R7 ADDRESS ON THE STACK
JSR CHECK_ANSWER
LDR R7, R6, #0 ;RESTORE R7 FOR RETURN FROM R6 STACK STORAGE
LEA R1, PARTY_SIZE_2
LDR R5, R1, #0      ; LOAD R1 PARTY SIZE INTO R5
LDR R5, R5, #0      ; DEREFERENCE SELFT TO GET PARTY SIZE = 5
ADD R6, R6, #1 ;MOVE POINTER BACK AFTER POP
ADD R2, R2, #-1 ; DECREMENT 1 TO FIND ANSWER (1-4)
BRz Q2ANSWER_1
ADD R2, R2, #-1
BRz Q2ANSWER_2
ADD R2, R2, #-1
BRz Q2ANSWER_3
ADD R2, R2, #-1
BRz Q2ANSWER_4
Q2ANSWER_1  
AND R5,R5, #0 ;INSTANT LOSS
LEA R0, Q2_FAIL1
TRAP x22
BRz Q2ALL_DEAD 
RET
Q2ANSWER_2
ADD R5, R5, #-16 ; -16 TO PARTY SIZE
BRnz Q2ALL_DEAD
STI R5, PARTY_SIZE_2 ; STI R5 TO PARTY SIZE
RET
Q2ANSWER_3
ADD R5, R5, #-16 ; -16 TO PARTY SIZE
BRnz Q2ALL_DEAD
STI R5, PARTY_SIZE_2 ;STORE INDIRECT R5 AS PARTY SIZE
RET
Q2ANSWER_4
LEA R0, Q2_FAIL2  ;LOAD FAIL MESSAGE
TRAP x22
Q2ALL_DEAD
AND R5, R5, #0; clear r5
STI R5, PARTY_SIZE_2 ;STORE R5
JSR GAME_OVER

MILES_REMAINING_2 .FILL MILES_REMAINING
PARTY_SIZE_2        .FILL PARTY_SIZE
MILES_Q2        .FILL #-150
Q2_PROMPT    .STRINGZ "\nA member of your party has a high fever.?\n"
Q2_OPT1      .STRINGZ "  1) Nurse them back to health\n"; (INSTANT FAIL)
Q2_OPT2      .STRINGZ "  2) Ration their food and press on slowly\n"    ;(MEDIUM LOSS)
Q2_OPT3      .STRINGZ "  3) Leave them behind with supplies\n"        ;(MEDIUM LOSS)
Q2_OPT4      .STRINGZ "  4) Leave them behind with no supplies\n"             ;(INSTANT FAIL)
Q2_FAIL1     .STRINGZ "\n!EVERYONE CAUGHT THE FEVER!"
Q2_FAIL2     .STRINGZ  "\n!BANDITS USED THEM TO TRACK YOU!"
;Q1_PEN1      .FILL   #-0          ; no penalty
;Q1_PEN2      .FILL   #-1
;Q1_PEN3      .FILL   #-10
;*****************************************************************************
; Description:
;  READS PARTY STATUS (MEMBERS) AND MILES TRAVELED
; Notes:
;  USES LOOPS AND LOOKUP TABLE TO CONVERT PLACES FROM >9 TO SINGLE
;  ASKII VALUES
;
; Register Usage:
; R0 PRINT PROMPT/GET CHAR
; R1 POINTER TO MILES STORED LOCATION/ COUNTER
; R2 LOAD #48 FOR ASKII CONVERT
; R3 COUNT/LOAD 10S, 100S, 1000S FOR LOADED MILES REMAINING AND PARTY SIZE
; R4 TEMP R5 (PARTY SIZE AND MILES) FOR MATH
; R5 USED TO STORE PARTY SIZE
; R6 STACK POINTER
; R7 RETURN ADDRESS
;****************************************************************************
STATUS_OF_PARTY
AND R2, R2, #0
AND R3, R3, #0
LEA R1, LOCATION_OF_PARTY
LDR R4, R1, #0
LDR R4, R4, #0
TENS_LOOP   ;COUNT NUMBER OF 10s IN PARTY SIZE
ADD R3, R3, #1  ;COUNTER
ADD R4, R4, #-10 ;SUBTRACT 10
BRzp TENS_LOOP ;DO WHILE POSITIVE
ADD R3, R3, #-1 ;SUBTRACT ONE TO FIX FINAL PASS
ADD R4, R4, #10 ;ADD 10 TO MAKE R4 POSITIVE
ADD R2, R7, #0 ;TEMP STORE R7 IN R2
JSR PRINT_USER_NAME
ADD R7, R2, #0 ;RESTORE R7
LEA R0, YOU_HAVE ;LD R0 "YOU HAVE"
TRAP x22        ;PRINT STRING
ADD R0, R3, #0 ; R0 = 10s place counter _ _
LD R2, ASKII_CONVERT ; LOAD R2 = 48 TO FIX DEC-> ASKII
ADD R0, R2, R0 ;DEC-> ASKII STORE IN R0
TRAP x21        ;PRINT CHAR
ADD R0, R4, #0 ;LOAD R0 WITH R4 (ONES PLACE)
ADD R0, R0, R2 ; DEC ->ASKII STORE IN R0
TRAP x21        ; PRINT CHAR
LEA R0, MEMBERS ; PRINT "MEMBERS LEFT IN YOUR PARTY"
TRAP x22        ; PRINT STRING
LEA R0, YOU_HAVE ; "YOU HAVE "
TRAP x22        ; PRINT STRING
;LEA R1, LOCATION_OF_MILES ; USE R1 AS A POINTER, TOO FAR TO LD
LEA R1, LOCATION_OF_MILES ; R1 ← ADDRESS POINTER
LDR R4, R1, #0            ; LOAD R4 WITH POINTER TO POINTER
LDR R4, R4, #0            ; LOAD WITH ITSELF TO DEREFERENCE THE FINAL VALUE
LD R3, THOUSANDS
AND R1, R1, #0          ; CLEAR R1 TO USE AS COUNTER
THOUSANDS_PLACE
ADD R1, R1, #1 ; ADD 1 TO COUNTER
ADD R4, R4, R3 ;SUBTRACT 1000
BRzp THOUSANDS_PLACE 
ADD R1, R1, #-1 ; FIX OVERRUN
NOT R3, R3
ADD R3, R3, #1 ;MAKE -1000 POS 1000
ADD R4, R3, R4 ; ADD BACK OVERRUN
ADD R0, R1, #0 ;STORE 1000s counter in r0
ADD R0, R2, R0 ; DEC -> ASKII
TRAP x21        ;print it
LD R3, HUNDREDS
AND R1, R1, #0          ; CLEAR R1 TO USE AS COUNTER
HUNDREDS_PLACE
ADD R1, R1, #1 ; ADD 1 TO COUNTER
ADD R4, R4, R3 ;SUBTRACT 100
BRzp HUNDREDS_PLACE 
ADD R1, R1, #-1 ; FIX OVERRUN
NOT R3, R3
ADD R3, R3, #1 ;MAKE -100 POS 100
ADD R4, R3, R4 ; ADD BACK OVERRUN
ADD R0, R1, #0 ;STORE 100s counter in r0
ADD R0, R2, R0 ; DEC -> ASKII
TRAP x21        ;print it
AND R1, R1, #0          ; CLEAR R1 TO USE AS COUNTER
TENS_PLACE
ADD R1, R1, #1 ; ADD 1 TO COUNTER
ADD R4, R4, #-10 ;SUBTRACT 10
BRzp TENS_PLACE 
ADD R1, R1, #-1 ; FIX OVERRUN
ADD R4, R4, #10 ; ADD BACK OVERRUN
ADD R0, R1, #0 ;STORE 10s counter in r0
ADD R0, R2, R0 ; DEC -> ASKII
TRAP x21        ;print it
ADD R0, R1, #0 ; STORE REMAINDER (ONES PLACE) IN 0
ADD R0, R2, R0 ; DEC -> ASKII
ADD R0, R0, #-1 ;adjust
TRAP x21        ;print it
LEA R0, TRAVELED ; " MILES TRAVELED"
TRAP x22        ;print

RET

YOU_HAVE .STRINGZ "\nYOU HAVE "
MEMBERS .STRINGZ " MEMBERS LEFT IN YOUR PARTY\n"
TRAVELED .STRINGZ " MILES REMAINING\n"

THOUSANDS .FILL #-1000                  ;lookup table
HUNDREDS .FILL #-100                    ;lookup table
LOCATION_OF_MILES .FILL MILES_REMAINING ;outside of 256 range to use LD
ASKII_CONVERT .FILL #48                 ; dec->askii
LOCATION_OF_PARTY .FILL PARTY_SIZE      ; TO ALLOW STI OPERATION
;*****************************************************************************
; Description:
;  CHECKS IF ANSWER IS GOOD (0<ANSWER<5)
; Notes:
;  SANITIZE USER INPUT USING BRANCH LOOPS
;
; Register Usage:
; R0 PRINT PROMPT/GET CHAR
; R1 USED TO SUBTRACT ASKII 4
; R2 USED TO STORE CORRECTED VAL
; R3 NOT USED
; R4 NOT USED
; R5 NOT USED
; R6 NOT USED
; R7 RETURN ADDRESS
;****************************************************************************
CHECK_ANSWER
GET_INPUT_AGAIN
LEA R0, ANSWER 
TRAP x22
TRAP x20 ;GET CHAR
TRAP x21 ;ECHO CHAR
LD R1, ASKII_SUBTRACT
ADD R2, R1, R0 ;SUBTRACT 52 FROM R0 (INPUT CHAR) AND STORE IN R2
BRp GREATER_THAN_FOUR
ADD R2, R2, #4
BRnz SMALLER_THAN_ONE
RET
SMALLER_THAN_ONE
GREATER_THAN_FOUR
LEA R0, BAD_ANSWER ;LOAD BAD ANSWER MESSAGE TO BE PRINTED
TRAP x22
BRnzp GET_INPUT_AGAIN

ASKII_SUBTRACT .FILL #-52 ;TO MAKE SURE NUMBER ISNT LARGER THAN 4
BAD_ANSWER .STRINGZ "\nNUMBER IS NOT 1-4 TRY AGAIN: "
ANSWER    .STRINGZ "ANSWER: "
;*****************************************************************************
; Description:
;  GAME OVER SCREEN
; Notes:
;  DISPLAYS MILES TRAVELED AND ENDS GAME
;
; Register Usage:
; R0 USED TO PRINT
; R1 NOT USED
; R2 NOT USED
; R3 NOT USED
; R4 NOT USED
; R5 NOT USED
; R6 STACK POINTER
; R7 RETURN ADDRESS
;****************************************************************************
GAME_OVER
LEA R0, OVER
TRAP x22
JSR STATUS_OF_PARTY

HALT
OVER .STRINGZ "\n************GAME OVER!************"
;*****************************************************************************
; Description:
;  PRINTS PROMPT AND ANSWERS 
; Notes:
;  PRINTS QUESTION 3
;
; Register Usage:
; R0 PRINT PROMPT
; R1 MILES EQUATION
; R2 RETURNS ANSWER
; R3 MILES AT THIS JUNCTURE
; R4 CLEARED
; R5 PARTY SIZE
; R6 STACK POINTER
; R7 RETURN ADDRESS
;****************************************************************************
QUESTION_THREE
LEA R2, MILES_REMAINING_3 ;LOAD AS POINTER
LD R3, MILES_Q3         ; LD Q3 MILE MOVEMENT
LDR R1, R2, #0          ; LOAD R2 POINTED INTO R1 AS POINTER
LDR R1, R1, #0          ; DEREFERENCE SELF TO GET VALUE
ADD R1, R1, R3 ;MILES REMAINING - question deduction
STI R1, MILES_REMAINING_3   ; STORE MILES
LEA R0, Q3_PROMPT           ; PROMPT
TRAP x22
LEA R0, Q3_OPT1             ;PRINT OPTIONS
TRAP x22
LEA R0, Q3_OPT2
TRAP x22
LEA R0, Q3_OPT3
TRAP x22
LEA R0, Q3_OPT4
TRAP x22
ADD R6, R6, #-1 ;MOVE POINTER
STR R7, R6, #0 ;STORE R7 ADDRESS ON THE STACK
JSR CHECK_ANSWER
LDR R7, R6, #0 ;RESTORE R7 FOR RETURN FROM R6 STACK STORAGE
LEA R1, PARTY_SIZE_3    ; LOAD PARTY SIZE POINTER TO POINTER
LDR R5, R1, #0          ; LOAD POINTER INTO R5
LDR R5, R5, #0          ; DEREFERENCE SELF TO GET VALUE
ADD R6, R6, #1          ;MOVE POINTER BACK AFTER POP
ADD R2, R2, #-1         ; FIND SELECTED ANSWER
BRz Q3ANSWER_1 
ADD R2, R2, #-1
BRz Q3ANSWER_2
ADD R2, R2, #-1
BRz Q3ANSWER_3
ADD R2, R2, #-1
BRz Q3ANSWER_4
Q3ANSWER_1              ; Q1 OUTCOME
ADD R5, R5, #-16
BRnz Q3ALL_DEAD
STI R5, PARTY_SIZE_3
RET
Q3ANSWER_2              ;Q2 OUTCOME
AND R5,R5, #0 ;INSTANT LOSS
LEA R0, Q3_FAIL1
TRAP x22
BRz Q3ALL_DEAD
RET
Q3ANSWER_3              ;Q3 OUTCOME
AND R5, R5, #0          
LEA R0, Q3_FAIL2        
TRAP x22
BRnz Q3ALL_DEAD
RET
Q3ANSWER_4          ;Q4 OUTCOME
ADD R5, R5, #-16
BRnz Q3ALL_DEAD
STI R5, PARTY_SIZE_3
RET
Q3ALL_DEAD
AND R5, R5, #0; clear r5
STI R5, PARTY_SIZE_3 ;STORE R5
JSR GAME_OVER

MILES_REMAINING_3 .FILL MILES_REMAINING
PARTY_SIZE_3        .FILL PARTY_SIZE
MILES_Q3        .FILL #-300
Q3_PROMPT    .STRINGZ "\n Icy Mountain Pass. How do you cross?\n"
Q3_OPT1      .STRINGZ "  1) Inch forward carefully\n"              ; (MEDIUM LOSS)
Q3_OPT2      .STRINGZ "  2) Breakdown wagons to lighten your load\n"      ;(INSTANT FAIL)
Q3_OPT3      .STRINGZ "  3) Send weaker members across first\n"         ;(INSTANT FAIL)
Q3_OPT4      .STRINGZ "  4) Charge straight through\n" ;(MEDIUM LOSS)  
Q3_FAIL1     .STRINGZ "\n!WAGONS DRAGGED YOU OFF THE EDGE!"
Q3_FAIL2     .STRINGZ  "\n!THEY YELL! AN AVALANCHE!"
;*****************************************************************************
; Description:
;  PRINTS PROMPT AND ANSWERS 
; Notes:
;  PRINTS QUESTION 4 (FINAL QUESTION), TOO FAR TO GET BACK TO MAIN
;
; Register Usage:
; R0 PRINT PROMPT
; R1 MILES EQUATION
; R2 RETURNS ANSWER
; R3 MILES AT THIS JUNCTURE
; R4 CLEARED
; R5 PARTY SIZE
; R6 STACK POINTER
; R7 RETURN ADDRESS
;****************************************************************************
;QUESTION_FOUR
LEA R2, MILES_REMAINING_4   ; LOAD MILES REMAINING
LD R3, MILES_Q4             ; LOAD MILES TO DEDUCT
LDR R1, R2, #0
LDR R1, R1, #0              ; DEREFERENCE SEQUENCE
ADD R1, R1, R3 ;MILES REMAINING - question deduction
STI R1, MILES_REMAINING_4       ; STORE MILES REMAINING
LEA R0, Q4_PROMPT               ; LOAD PROMPT AND OPTIONS
TRAP x22
LEA R0, Q4_OPT1
TRAP x22
LEA R0, Q4_OPT2
TRAP x22
LEA R0, Q4_OPT3
TRAP x22
LEA R0, Q4_OPT4
TRAP x22
ADD R6, R6, #-1 ;MOVE POINTER
STR R7, R6, #0 ;STORE R7 ADDRESS ON THE STACK
JSR CHECK_ANSWER
LDR R7, R6, #0 ;RESTORE R7 FOR RETURN FROM R6 STACK STORAGE
LEA R1, PARTY_SIZE_4
LDR R5, R1, #0          
LDR R5, R5, #0   ; LOAD REGISTER TO SELF THEN DEREFERENCE TO GET PARTY SIZE
ADD R6, R6, #1 ;MOVE POINTER BACK AFTER POP
ADD R2, R2, #-1     ; FIND SELECTED ANSWER
BRz Q4ANSWER_1
ADD R2, R2, #-1
BRz Q4ANSWER_2
ADD R2, R2, #-1
BRz Q4ANSWER_3
ADD R2, R2, #-1
BRz Q4ANSWER_4
Q4ANSWER_1                  ;ALL OPTIONS FAIL
AND R5,R5, #0 ;INSTANT LOSS
LEA R0, Q4_FAIL1
TRAP x22
BRz Q4ALL_DEAD
RET
Q4ANSWER_2
AND R5,R5, #0 ;INSTANT LOSS
LEA R0, Q4_FAIL1
TRAP x22
BRz Q4ALL_DEAD
RET
Q4ANSWER_3
AND R5,R5, #0 ;INSTANT LOSS
LEA R0, Q4_FAIL1
TRAP x22
BRz Q4ALL_DEAD
RET
Q4ANSWER_4
AND R5,R5, #0 ;INSTANT LOSS
LEA R0, Q4_FAIL1
TRAP x22
BRz Q4ALL_DEAD
RET
Q4ALL_DEAD
AND R5, R5, #0; clear r5
STI R5, PARTY_SIZE_4 ;STORE R5
JSR GAME_OVER

MILES_REMAINING_4 .FILL MILES_REMAINING
PARTY_SIZE_4        .FILL PARTY_SIZE
MILES_Q4        .FILL #-800
Q4_PROMPT    .STRINGZ "\nYoure out of water. Theres a cloudy puddle..\n"
Q4_OPT1      .STRINGZ "  1) Boil, Strain, Drink\n"              ; (MEDIUM LOSS)
Q4_OPT2      .STRINGZ "  2) God made dirt, dirt dont hurt\n"      ;(INSTANT FAIL)
Q4_OPT3      .STRINGZ "  3) Only give to animals\n"         ;(INSTANT FAIL)
Q4_OPT4      .STRINGZ "  4) Drink it (Eyes closed)\n"      ;(INSTANT FAIL)  
Q4_FAIL1     .STRINGZ "\n!THE CAMP GOT DYSENTARY!"
Q4_FAIL2     .STRINGZ  "\n!THE COWS ATTACKED!"
;*****************************************************************************
; Description:
;  PRINTS USER NAME
; Notes:
;  PRINTS USER NAME
;
; Register Usage:
; R0 USED TO PRINT
; R1 INCREMENT AS BUFFER PTR
; R2 NOT USED
; R3 NOT USED
; R4 NOT USED
; R5 NOT USED
; R6 ITERATE THROUGH STACK TO PRINT NAME
; R7 RETURN ADDRESS
;****************************************************************************
PRINT_USER_NAME
AND R0, R0, #0
ADD R0, R0, #10
TRAP x21
LDR R1, R6, #0
ADD R1, R1, #1
LDR R0, R1, #0
TRAP x21
PRINT
ADD R1, R1, #1
LDR R0, R1, #0
TRAP x21
BRnp PRINT

RET
.END
;*****************************************************************************
; Description:
;  TRAP INSTRUCTION USES POLLING KBSR TO RANDOMIZE NUMBER 0< R1 <10
; Notes:
;  PRINTS USER NAME
;
; Register Usage:
; R0 USED TO HOLD KBSR VALUE
; R1 RETURN VALUE RANDOM COUNTER
; R2 USED AS FLIP FLAG
; R3 KBSR POINTER
; R4 CHECK BRANCH CONDITION SET CC
; R5 MASK READY BIT x8000
; R6 ITERATE THROUGH STACK TO PRINT NAME
; R7 RETURN ADDRESS
;****************************************************************************
.ORIG x3800
LEA R0, PRESS_KEY
TRAP x22
    AND R1,R1, #0         ; Clear counter
    AND R2,R2, #0         ; 0 = up
    AND R3,R3, #0
    LD R5, MASK_VAL ;LOAD X8000 TO USE AS MASK

MAIN_LOOP
    ADD R3,R2,#0         ;R3 =r2
    BRz LOOP_UP          ; R2==0 ? UP
    BRnzp LOOP_DOWN      ; else ? DOWN
LOOP_UP
    LD  R3,KBSR_PTR     ;ld kbsr pointer into r6
    LDR R0,R3,#0        ;ld via ldr into r0
    AND R0,R0, R5    ; mask off everything but ready bit
    BRz UP_CONTINUE      ; no key yet ? keep counting
    LD  R3,KBDR_PTR      ; key pressed ? read and quit
    LDR R0,R3,#0
    BRnzp DONE_RAND
UP_CONTINUE
    ADD R1,R1,#1         ; R1+=1
    ADD R4,R1,#-9        ; R4 = R1–9
    BRzp SWITCH_DIR      ; if R1>=9 switch direction
    BRnzp MAIN_LOOP      ; else loop
LOOP_DOWN
    LD  R3,KBSR_PTR     ;ld kbsr ptr into r6
    LDR R0,R3,#0        ; ldr kbsr data into r0
    AND R0,R0,R5         ; mask with r5
    BRz DOWN_CONTINUE    ; if no key press (0msb) keep looping
    LD  R3,KBDR_PTR      ; read kbdr into r6
    LDR R0,R3,#0         ; ldr to set cc
    BRnzp DONE_RAND
DOWN_CONTINUE
    ADD R1,R1,#-1        ; Subtract 1
    ADD R4,R1,#0         ; is r1 0
    BRz SWITCH_DIR       ; if 0 count up
    BRnzp MAIN_LOOP      ; else loop back
SWITCH_DIR
    ADD   R2,R2,#1    ; R2 = R2 + 1
    AND   R2,R2,#1    ; 
    BRnzp MAIN_LOOP   ; Always loop back

DONE_RAND
ADD R0, R1, #0
LD R3, ASKII48
ADD R0, R0, R3
TRAP x21
LEA R0, JOINED
TRAP x22
LD R7, RET_VAL
LD R6, REPLACER6
RET
HALT
KBSR_PTR .FILL xFE00
KBDR_PTR .FILL xFE02
MASK_VAL .FILL x8000
RET_VAL   .FILL x300A
JOINED .STRINGZ " MEMBERS HAVE JOINED YOUR PARTY"
PRESS_KEY .STRINGZ "**PRESS ANY KEY TO GROW PARTY**"
ASKII48 .FILL #48
REPLACER6 .FILL xFDFF ;FOR SOME REASON R6 WAS CLEARING WHEN THE TRAP CALL WAS MADE?????????
.END

